- name: Ensure users exist and create home directory if needed
  hosts: localhost
  become: yes
  vars:
    users:
      - username: testuser2
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPHxUdodIPT0jfP3AFqK9urGLc/DVJ66/DVPTgjb9/ayROTIzZZFhW+mB0y7VI6DF5a3EinsORy6xJ3zyneiBWlKCsHTR9Sy5AES+S+Ue31CUy9dBaB9HenDXELzuiOVXFjLYY+WSwFX0tFbntzQ5r2LoYeTkFXbUxEUJwkIaHWE3LOJhsz25CHRosyBX471YZG4nMdmXZz6dx9b5Oja9Qkm225heNygtSKlwI+0rKbn2pvIBCENMVj6FKYYuWFp3FoR2ByWirE/XOSmaQuQRYfZRGgG5q1laCqg3SYC8qdnSM8YfkPrrZLj0sxumgiSIkGlzAtYR4EE/fTQxpXitldDN7cKzpMoAeYyf5F4D83eSRRJNWDllV0EiNRYourCJHpAU2Lzmbe4ww8poIrVGnsCAWSVSsRfET/t/DNBoxTGl40qAlPb2KcuPzuG3NRKPZdIRLW1BHvFvVYX2CC89QUvOFN3qjPQ0lev5Dz9f5W3p8CXSV5TXfNodFu4SO1g0= jithu@LAPTOP-0UQTU4PC"

  tasks:
    - name: Ensure users exist
      ansible.builtin.shell:
        cmd: "cut -d: -f1 /etc/passwd"
      register: output_users_exist
      changed_when: false

    - name: Create user if it doesn't exist
      ansible.builtin.user:
        name: "{{ item.username }}"
        shell: /bin/bash
        createhome: yes
      with_items: "{{ users }}"
      when: not (item.username in output_users_exist.stdout_lines)

    - name: Ensure home directory exists
      ansible.builtin.file:
        path: "/home/{{ item.username }}"
        state: directory
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: "0755"
      with_items: "{{ users }}"
      when: not ansible.builtin.stat(path="/home/{{ item.username }}").exists

    - name: Ensure SSH keys are added for users
      ansible.builtin.copy:
        dest: "/home/{{ item.username }}/.ssh/authorized_keys"
        content: "{{ item.ssh_key }}"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: "0600"
      with_items: "{{ users }}"



[WARNING]: conditional statements should not include jinja2 templating delimiters such as {{ }} or {% %}. Found: ansible.builtin.stat(path="/home/{{
item.username }}").stat.exists == False
fatal: [localhost]: FAILED! => {"msg": "The conditional check 'ansible.builtin.stat(path=\"/home/{{ item.username }}\").stat.exists == False' failed. The error was: Conditional is marked as unsafe, and cannot be evaluated.\n\nThe error appears to be in '/home/ubuntu/ansible/playbook.yml': line 18, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n    - name: Ensure home directory exists\n      ^ here\n"}


- name: Ensure users exist and create home directory if needed
  hosts: localhost
  become: yes
  vars:
    users:
      - username: testuser2
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPHxUdodIPT0jfP3AFqK9urGLc/DVJ66/DVPTgjb9/ayROTIzZZFhW+mB0y7VI6DF5a3EinsORy6xJ3zyneiBWlKCsHTR9Sy5AES+S+Ue31CUy9dBaB9HenDXELzuiOVXFjLYY+WSwFX0tFbntzQ5r2LoYeTkFXbUxEUJwkIaHWE3LOJhsz25CHRosyBX471YZG4nMdmXZz6dx9b5Oja9Qkm225heNygtSKlwI+0rKbn2pvIBCENMVj6FKYYuWFp3FoR2ByWirE/XOSmaQuQRYfZRGgG5q1laCqg3SYC8qdnSM8YfkPrrZLj0sxumgiSIkGlzAtYR4EE/fTQxpXitldDN7cKzpMoAeYyf5F4D83eSRRJNWDllV0EiNRYourCJHpAU2Lzmbe4ww8poIrVGnsCAWSVSsRfET/t/DNBoxTGl40qAlPb2KcuPzuG3NRKPZdIRLW1BHvFvVYX2CC89QUvOFN3qjPQ0lev5Dz9f5W3p8CXSV5TXfNodFu4SO1g0= jithu@LAPTOP-0UQTU4PC"

  tasks:
    - name: Create user if it doesn't exist
      ansible.builtin.user:
        name: "{{ item.username }}"
        shell: /bin/bash
        createhome: yes
      with_items: "{{ users }}"

    - name: Ensure home directory exists
      ansible.builtin.file:
        path: "/home/{{ item.username }}"
        state: directory
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
      with_items: "{{ users }}"
      when: ansible.builtin.stat(path="/home/{{ item.username }}").stat.exists == False

    - name: Ensure SSH keys are added for users
      ansible.builtin.copy:
        dest: "/home/{{ item.username }}/.ssh/authorized_keys"
        content: "{{ item.ssh_key }}"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: "0600"
      with_items: "{{ users }}"



when: 
        - item.username not in output_users_exist.stdout_lines | default([])
        - item.username in users | map(attribute='username')


---
- name: Add users with SSH keys and sudo permissions
  hosts: localhost
  become: yes
  vars:
    users:
      - username: user1
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      - username: user2
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      # Add more users as needed

  tasks:
    - name: Ensure users exist and create home directory if needed
      block:
        - name: Ensure users exist
          ansible.builtin.shell:
            cmd: "cut -d: -f1 /etc/passwd"
          register: output_users_exist
          changed_when: false

        - name: Create home directory if it doesn't exist
          file:
            path: "/home/{{ item.username }}"
            state: directory
            owner: "{{ item.username }}"
            group: "{{ item.username }}"
          with_items: "{{ users }}"
          when: not (item.username in output_users_exist.stdout_lines)

        - name: Ensure SSH keys are added for users
          authorized_key:
            user: "{{ item.username }}"
            key: "{{ item.ssh_key }}"
          with_items: "{{ users }}"
          when: not (item.username in output_users_exist.stdout_lines)
      become: yes

    - name: Grant sudo permissions to users
      lineinfile:
        dest: /etc/sudoers
        line: "{{ item.username }} ALL=(ALL) NOPASSWD:ALL"
        validate: 'visudo -cf %s'
      with_items: "{{ users }}"
      when: not (item.username in output_users_exist.stdout_lines)



---
- name: Mount storage to EC2 instance and format as VDO
  hosts: your_ec2_instance
  become: yes
  vars:
    volume_device: "/dev/xvdf"  # Update with the device path of the volume
    vdo_logical_size: "100G"     # Adjust as needed

  tasks:
    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - vdo
        - lvm2

    - name: Initialize VDO volume
      command: vdo create --name=vdo_home --device="{{ volume_device }}" --vdoLogicalSize="{{ vdo_logical_size }}"
      args:
        creates: /dev/mapper/vdo_home

    - name: Format VDO volume
      filesystem:
        fstype: ext4
        dev: /dev/mapper/vdo_home

    - name: Mount VDO volume to /home
      mount:
        path: /home
        src: /dev/mapper/vdo_home
        fstype: ext4
        state: mounted
        opts: defaults,noatime

- name: Mount Storage and Configure VDO
  hosts: all
  gather_facts: false
  tasks:
    - name: Format volume as VDO
      command:
        cmd: vdo create --name=my_vdo --device=/dev/sdf
      when: ebs_volume.changed

    - name: Mount VDO volume to /home
      mount:
        name: /home
        src: /dev/mapper/my_vdo
        fstype: ext4
        opts: defaults
        state: mounted	

- name: Configure Users and SSH Keys
  hosts: localhost
  gather_facts: false
  vars:
    users:
      - username: alice
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB... (Alice's public key)"
      - username: bob
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB... (Bob's public key)"
      # Add more users as needed

  tasks:
    - name: Create users
      user:
        name: "{{ item.username }}"
        state: present
        groups: sudo
      with_items: "{{ users }}"
      when: item.ssh_key is defined

    - name: Add SSH keys for users
      authorized_key:
        user: "{{ item.username }}"
        key: "{{ item.ssh_key }}"
      with_items: "{{ users }}"
      when: item.ssh_key is defined


---
- name: Add users with SSH keys and sudo permissions
  hosts: localhost
  become: yes
  vars:
    users:
      - username: user1
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPHxUdodIPT0jfP3AFqK9urGLc/DVJ66/DVPTgjb9/ayROTIzZZFhW+mB0y7VI6DF5a3EinsORy6xJ3zyneiBWlKCsHTR9Sy5AES+S+Ue31CUy9dBaB9HenDXELzuiOVXFjLYY+WSwFX0tFbntzQ5r2LoYeTkFXbUxEUJwkIaHWE3LOJhsz25CHRosyBX471YZG4nMdmXZz6dx9b5Oja9Qkm225heNygtSKlwI+0rKbn2pvIBCENMVj6FKYYuWFp3FoR2ByWirE/XOSmaQuQRYfZRGgG5q1laCqg3SYC8qdnSM8YfkPrrZLj0sxumgiSIkGlzAtYR4EE/fTQxpXitldDN7cKzpMoAeYyf5F4D83eSRRJNWDllV0EiNRYourCJHpAU2Lzmbe4ww8poIrVGnsCAWSVSsRfET/t/DNBoxTGl40qAlPb2KcuPzuG3NRKPZdIRLW1BHvFvVYX2CC89QUvOFN3qjPQ0lev5Dz9f5W3p8CXSV5TXfNodFu4SO1g0= jithu@LAPTOP-0UQTU4PC"
      - username: user2
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      # Add more users as needed

  tasks:
    - name: Ensure users exist
      user:
        name: "{{ item.username }}"
        shell: /bin/bash
        createhome: yes
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

    - name: Ensure SSH keys are added for users
      authorized_key:
        user: "{{ item.username }}"
        key: "{{ item.ssh_key }}"
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

    - name: Grant sudo permissions to users
      lineinfile:
        dest: /etc/sudoers
        line: "{{ item.username }} ALL=(ALL) NOPASSWD:ALL"
        validate: 'visudo -cf %s'
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))


- name: Ensure users exist and create home directory if needed
  block:
    - name: Ensure users exist
      user:
        name: "{{ item.username }}"
        shell: /bin/bash
        createhome: yes
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

    - name: Create home directory if it doesn't exist
      file:
        path: "/home/{{ item.username }}"
        state: directory
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

    - name: Ensure SSH keys are added for users
      authorized_key:
        user: "{{ item.username }}"
        key: "{{ item.ssh_key }}"
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))
  become: yes

---
- name: Add users with SSH keys and sudo permissions
  hosts: localhost
  become: yes
  vars:
    users:
      - username: user1
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      - username: user2
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      # Add more users as needed

  tasks:
    - name: Ensure users exist and create home directory if needed
      block:
        - name: Ensure users exist
          user:
            name: "{{ item.username }}"
            shell: /bin/bash
            createhome: yes
          with_items: "{{ users }}"
          when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

        - name: Create home directory if it doesn't exist
          file:
            path: "/home/{{ item.username }}"
            state: directory
            owner: "{{ item.username }}"
            group: "{{ item.username }}"
          with_items: "{{ users }}"
          when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

        - name: Ensure SSH keys are added for users
          authorized_key:
            user: "{{ item.username }}"
            key: "{{ item.ssh_key }}"
          with_items: "{{ users }}"
          when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))
      become: yes

    - name: Grant sudo permissions to users
      lineinfile:
        dest: /etc/sudoers
        line: "{{ item.username }} ALL=(ALL) NOPASSWD:ALL"
        validate: 'visudo -cf %s'
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))


TASK [Add SSH keys for users] ************************************************************************************************************************************
failed: [localhost] (item={'username': 'srinu', 'ssh_key': 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPHxUdodIPT0jfP3AFqK9urGLc/DVJ66/DVPTgjb9/ayROTIzZZFhW+mB0y7VI6DF5a3EinsORy6xJ3zyneiBWlKCsHTR9Sy5AES+S+Ue31CUy9dBaB9HenDXELzuiOVXFjLYY+WSwFX0tFbntzQ5r2LoYeTkFXbUxEUJwkIaHWE3LOJhsz25CHRosyBX471YZG4nMdmXZz6dx9b5Oja9Qkm225heNygtSKlwI+0rKbn2pvIBCENMVj6FKYYuWFp3FoR2ByWirE/XOSmaQuQRYfZRGgG5q1laCqg3SYC8qdnSM8YfkPrrZLj0sxumgiSIkGlzAtYR4EE/fTQxpXitldDN7cKzpMoAeYyf5F4D83eSRRJNWDllV0EiNRYourCJHpAU2Lzmbe4ww8poIrVGnsCAWSVSsRfET/t/DNBoxTGl40qAlPb2KcuPzuG3NRKPZdIRLW1BHvFvVYX2CC89QUvOFN3qjPQ0lev5Dz9f5W3p8CXSV5TXfNodFu4SO1g0= jithu@LAPTOP-0UQTU4PC'}) => {"ansible_loop_var": "item", "changed": false, "item": {"ssh_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPHxUdodIPT0jfP3AFqK9urGLc/DVJ66/DVPTgjb9/ayROTIzZZFhW+mB0y7VI6DF5a3EinsORy6xJ3zyneiBWlKCsHTR9Sy5AES+S+Ue31CUy9dBaB9HenDXELzuiOVXFjLYY+WSwFX0tFbntzQ5r2LoYeTkFXbUxEUJwkIaHWE3LOJhsz25CHRosyBX471YZG4nMdmXZz6dx9b5Oja9Qkm225heNygtSKlwI+0rKbn2pvIBCENMVj6FKYYuWFp3FoR2ByWirE/XOSmaQuQRYfZRGgG5q1laCqg3SYC8qdnSM8YfkPrrZLj0sxumgiSIkGlzAtYR4EE/fTQxpXitldDN7cKzpMoAeYyf5F4D83eSRRJNWDllV0EiNRYourCJHpAU2Lzmbe4ww8poIrVGnsCAWSVSsRfET/t/DNBoxTGl40qAlPb2KcuPzuG3NRKPZdIRLW1BHvFvVYX2CC89QUvOFN3qjPQ0lev5Dz9f5W3p8CXSV5TXfNodFu4SO1g0= jithu@LAPTOP-0UQTU4PC", "username": "srinu"}, "msg": "Failed to create directory /home/srinu/.ssh : [Errno 13] Permission denied: '/home/srinu/.ssh'"}


---
- name: Add users with SSH keys and sudo permissions
  hosts: localhost
  become: yes
  vars:
    users:
      - username: user1
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      - username: user2
        ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB..."
      # Add more users as needed

  tasks:
    - name: Ensure users exist and create home directory if needed
      block:
        - name: Ensure users exist
          user:
            name: "{{ item.username }}"
            shell: /bin/bash
            createhome: yes
          with_items: "{{ users }}"
          when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

        - name: Create home directory if it doesn't exist
          file:
            path: "/home/{{ item.username }}"
            state: directory
            owner: "{{ item.username }}"
            group: "{{ item.username }}"
          with_items: "{{ users }}"
          when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))

        - name: Ensure SSH keys are added for users
          authorized_key:
            user: "{{ item.username }}"
            key: "{{ item.ssh_key }}"
          with_items: "{{ users }}"
          when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))
      become: yes

    - name: Grant sudo permissions to users
      lineinfile:
        dest: /etc/sudoers
        line: "{{ item.username }} ALL=(ALL) NOPASSWD:ALL"
        validate: 'visudo -cf %s'
      with_items: "{{ users }}"
      when: not (item.username in lookup('pipe', 'cut -d: -f1 /etc/passwd'))
